/** De Bruijn-Erdos checker for Nauty-generated graphs.

Example usage:

    NAUTY="../nauty26r11"
    $NAUTY/geng -b -C 6 | ./dbe | $NAUTY/showg -A
**/

#include <algorithm>
#include <chrono>
#include <climits>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>

#include <gflags/gflags.h>

#include "src/analysis.h"
#include "src/common.h"
#include "src/graphs.h"

DEFINE_bool(v, false, "Verbose analysis");
DEFINE_bool(q, false, "Quiet mode");
DEFINE_bool(p, true, "Include universal line in line counts");
DEFINE_bool(n, false, "Do not output graphs with |V(G)| lines");
DEFINE_int32(nmin, 0,
             "Only output graphs with at least this many distinct lines");
DEFINE_int32(nmax, INT_MAX,
             "Only output graphs with at most this many distinct lines");
DEFINE_int32(dmin, 0,
             "Only count lines generated by pairs of vertices at at least this "
             "distance");
DEFINE_int32(dmax, INT_MAX,
             "Only count lines generated by pairs of vertices at at "
             "most this distance");
DEFINE_bool(u, false, "Do not output graphs with a universal line");
DEFINE_int32(dumin, 0,
             "Among pairs that generate the universal line, only count pairs "
             "at at most this distance");
DEFINE_int32(dumax, INT_MAX,
             "Among pairs that generate the universal line, only count pairs "
             "at at least this distance");
DEFINE_int32(zmin, INT_MIN,
             "Only output graphs what a AMRZ gap of at least this number");
DEFINE_int32(zmax, INT_MAX,
             "Only output graphs what a AMRZ gap of at most this number");
DEFINE_int32(o, 0, "Output format");

void ParseCommandLineFlags(int argc, char *argv[]) {
  gflags::SetUsageMessage(
      "De Bruijn-Erdos checker for Nauty-generated graphs.");
  gflags::SetVersionString("1.0.0");
  gflags::ParseCommandLineFlags(&argc, &argv, true);
}

std::string Values(const MetricSpaceInfo &info, int num_bridges) {
  std::vector<int> values = {info.num_lines,           info.num_lines_dist1,
                             info.num_lines_dist2,     info.num_universal,
                             info.num_universal_dist1, info.num_universal_dist2,
                             num_bridges};

  std::stringstream ss;
  ss << std::setw(2) << info.num_vertices;
  for (int value : values) {
    ss << "," << std::setw(2) << value;
  }
  return ss.str();
}

int main(int argc, char *argv[]) {
  ParseCommandLineFlags(argc, argv);

  if (!FLAGS_q) {
    std::cerr << ">A dbe" << std::endl;
  }

  AnalysisOptions options;
  options.dmin = FLAGS_dmin;
  options.dmax = FLAGS_dmax;
  options.dumin = FLAGS_dumin;
  options.dumax = FLAGS_dumax;
  options.count_bridges = (FLAGS_o == 2);
  options.count_lines_by_distance = (FLAGS_o == 2);
  options.include_universal_in_lines = FLAGS_p;
  options.skip_graphs_with_universal_line = FLAGS_u;
  options.verbose = FLAGS_v;

  auto begin_time = Clock::now();
  unsigned long long num_graphs = 0;
  unsigned long long num_output_graphs = 0;
  boost::optional<Graph> optional_graph;
  while ((optional_graph = ReadGraph())) {
    ++num_graphs;

    Graph graph(optional_graph.get());

    const int num_vertices = boost::num_vertices(graph);
    DistanceMatrix distance_matrix(num_vertices);
    GetDistanceMatrix(graph, &distance_matrix);

    DistanceMatrixMap dist(distance_matrix, graph);
    MetricSpaceInfo info;
    bool valid = AnalyzeMetricSpace(num_vertices, dist, options, &info);

    int num_bridges = -1;
    if (options.count_bridges) {
      num_bridges = CountBridges(graph);
    }

    if ((!FLAGS_q) && (num_graphs % 10000000 == 0)) {
      std::cerr << ">Z (in-progress) dbe analyzed " << num_graphs
                << " graphs in " << GetMillisecondsSince(begin_time) / 1000.0
                << " seconds " << std::endl;
    }

    // Determine whether to output this graph.
    if (!valid) {
      continue;
    } else if (FLAGS_u && info.num_universal > 0) {
      // Skip because this graph has a universal line.
      continue;
    } else if (FLAGS_n && info.num_lines >= info.num_vertices) {
      // Skip because this graph has as many lines as vertices.
      continue;
    } else if ((info.amrz_gap < FLAGS_zmin) || (info.amrz_gap > FLAGS_zmax)) {
      // Skip because this graph an AMRZ gap outside the requested range.
      continue;
    } else if ((info.num_lines < FLAGS_nmin) || (info.num_lines > FLAGS_nmax)) {
      continue;
    }

    ++num_output_graphs;
    if (FLAGS_o == 0) {
      if (!FLAGS_q) {
        std::cerr << "Graph " << num_output_graphs << " has " << info.num_lines
                  << " lines (from " << info.num_line_pairs << " pairs) and "
                  << info.num_universal << " universal lines (AMRZ gap "
                  << info.amrz_gap << ")" << std::endl;
      }
      WriteGraph(graph);
    } else if (FLAGS_o == 1) {
      std::cout << info.num_lines << "," << info.num_universal << ","
                << info.amrz_gap << std::endl;
    }
  }

  if (!FLAGS_q) {
    std::cerr << ">Z dbe analyzed " << num_graphs << " graphs in "
              << GetMillisecondsSince(begin_time) / 1000.0 << " seconds"
              << std::endl;
  }
  gflags::ShutDownCommandLineFlags();
  return 0;
}
